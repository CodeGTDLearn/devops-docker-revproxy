worker_processes 4;
events {
    worker_connections 1024;
        }

http{
     sendfile on;


    #1) Nome fake para o 'Compose Service' da WebApp (SERVIDOR-TARGET)
    upstream urlrealescalada {

        least_conn;
        #1.1) SERVIDOR HYPER-V (LOCAL)
        #1.1.1)server: comando do nginx que define a WEBAPP escalada, como um server
        #1.1.2)revproxbal: nome da aplicao
        #1.1.3)webapp: nome do 'Compose Service' da WebApp
        #1.1.4) 1 : nome co container escalado
        #1.1.5) 8080: porta escutada no nginx/server (listen 8080;)
        server revproxbal_webapp_1:8080;  #>>> escalar com docker-compose scale nao e possivel
        #server revproxbal_webapp_2:8080;  #>>> #1: host not found in upstream "revproxbal_webapp_2:8080"
        #server revproxbal_webapp_2:8080; #>>> Stopping and removing revproxbal_webapp_2 ...

        #1.2) SERVIDOR AWS (REMOTO)
        #1.2.1) '3.86.23.170': IPv4 Public IP
        #1.2.2) 8080: porta escutada no nginx/server (listen 8080;)
        #server 3.86.23.170:8080;

    #OBS1: o 'Compose WebApp Service'  e o 'Compose Router Service' devem estar na mesma 'network'
    #OBS2: DOCKER-COMPOSE <COMPOSE-FILE> para descobrir o nome completo dos servidores escalados (copy and paste)
    }

    server {
        listen 8080;

        gzip on;

        #2) PROXY REVERSO (SHIELDPROXYREVERSO)
        #'/shieldProxyReverso' e a URL receptora dos request, VISTA/EXPOSTA AO USUARIO NO BROWSER
        # EX: http://{{url}}:1111/shieldProxyReverso
        location /shieldproxyreverso {
            #2.1) ELEMENTOS P/ O REDIRECIONAMENTO FEITO PELO PROXY REVERSO (SHIELDPROXYREVERSO)
            #2.1.1) urlRealEscalada: NginX Upstream Server, webapp REAL escalada logo acima na opcao 'Upstream'
            #2.1.2) users: E a URI interna da WEBAPP (RequestMapping do controller no Codigo Spring/Java)
            proxy_pass http://urlrealescalada/users;
            proxy_redirect off;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
}