# 1) Worker-Process (number | auto):
# - number: Deve acompanhar o numero de 'cores' da 'CPU de deploy',
#           Define quantos processos de trabalho Nginx criara
# - auto: autodetecta o numro de cores disponiveis
worker_processes 4;

# 2) Events: como o Nginx gerencia as conexões de rede.
events {

# 2.1) Worker-Connections: (PERFORMANCE)
# - Qtde de 'conexões simultaneas' cada 'Worker-Process' roda
            worker_connections 1024;
       }

# 3) http:
# - Comportamentos Geral aplicavel a todas conexões HTTP processadas
http {

# 3.1) sendfile: (PERFORMANCE)
# - o Nginx pede ao OS para transf. o arquivo 'direto' do disco para a rede/client
#   nao passando pelo 'buffer do Nginx'.
# - Economiza CPU e Memoria
     sendfile on;

# 3.2) "upstream": (PERFORMANCE)
# - Define o 'grupo de servers' do 'balanceamento de carga'
    upstream servers-para-loadbalancing {

# 3.2.1) Tipos de Algoritmo de Balanceamento de Carga:
# A) round-robin: Distribuicao sequencial dos 'requests'
# B) ip-hash:
# - Garante que os 'requests' de 'um mesmo client' cairao 'num mesmo server'
#   exceto se o server estiver indisponível.
# C) least_conn: Distribue o 'request' p/ o 'server' c/ menor carga/uso
        least_conn;

# 3.2.2) "server":
# - Define is 'servers' p/ o 'Balanceamento de Carga'
        server revproxbal_webapp_1:8080;
        server revproxbal_webapp_2:8080;
# A) "revproxbal": Container do Docker
# B) "_webapp_": nome do Service no Docker-Compose
# C) "1" : numero do container/service escalado
# D) ":8080": Porta escutada no Container do Docker

# 3.2.3) ASPECTOS RELEVANTES SOBRE A SCALING:
# STATIC-SCALING (PRESETADA NO DOCKER-COMPOSE)
#    - Totalmente possivel do nginx
#    - Criando os clones da webapp "AB-INITIO" no COMPOSE

#OBS1: Os services 'WebApp' e 'Nginx' conectados na mesma 'network' no compose
    }

# 3.3
    server {

# 3.3.1: Nginx escuta na porta 8080 para 'requests' HTTP.
        listen 8080;

# 3.3.2: Gzip (PERFORMANCE)
# - Nginx comprime os 'files' das 'responses'
# - antes de envia-los p/ o 'client/browser'
# - Reduz ate 70% a 80%, melhorando o desempenho.
        gzip on;

# 3.3.3: Gzip_types:
# - Especifica os tipos de conteúdo que devem ser comprimidos.
        gzip_types text/css text/html application/javascript application/json application/xml;

        location /url-vista-no-browser {
        #PROXY REVERSO (URL-VISTA-NO-BOWSER)
        #a)"/url-vista-no-browser": URL receptora dos request, EXPOSTA NO BROWSER
        #b) EX: http://{{url}}:1111/url-vista-no-browser

            #ELEMENTOS DE REDIRECIONAMENTO DO PROXY REVERSO (url-vista-no-browser)
            #a) "proxy_pass": 'grupo-de-servers-para-loadbalancing'
            #    - Opcao "Upstream" (logo acima)
            escalada
            #b) "RequestMapping do controller": '/users': URI interna da WEBAPP no codigo Spring
            proxy_pass http://servers-para-loadbalancing/users;
                proxy_redirect off;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
}